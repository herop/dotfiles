#+TITLE: Emacs Configuration
#+AUTHOR: Jochen Burkhard

* Introduction
* Package Management
* Refer to UncleDavesEmacs*
* Org-Server
** Start Server
#+begin_src emacs-lisp
(add-to-list 'load-path "~/org/")
;; (require 'org-roam-protocol)
#+end_src
* Looks
** UTF-8
#+begin_src emacs-lisp
  (set-language-environment 'utf-8)                                                           
  (setq locale-coding-system 'utf-8)                                                          

  ;; set the default encoding system                                                          
  (prefer-coding-system 'utf-8)                                                               
  (setq default-file-name-coding-system 'utf-8)                                               
  (set-default-coding-systems 'utf-8)                                                         
  (set-terminal-coding-system 'utf-8)                                                         
  (set-keyboard-coding-system 'utf-8)                                                         

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.                    
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src
** Standard font
#+begin_src emacs-lisp
  ;; (add-to-list 'default-frame-alist
  ;;                        '(font . "Consolas-8"))
  ;; (set-face-attribute 'default nil :font "Consolas-8" )
  ;; (set-frame-font "Consolas-8" nil t)
  ;; (set-fontset-font t 'symbol "Twitter Color Emoji" nil 'append)
  ;; (global-set-key (kbd "C-c i") #'text-scale-increase)
  ;; (global-set-key (kbd "C-c d") #'text-scale-decrease)
#+end_src
** Remove lame startup screen
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
** All-the-icons
#+begin_src emacs-lisp
;; (require 'all-the-icons)
;; (setq inhibit-compacting-font-caches t)
;; (set-fontset-font t 'unicode (font-spec :family "all-the-icons") nil 'append)
;; (set-fontset-font t 'unicode (font-spec :family "file-icons") nil 'append)
;; (set-fontset-font t 'unicode (font-spec :family "Material Icons") nil 'append)
;; (set-fontset-font t 'unicode (font-spec :family "github-octicons") nil 'append)
;; (set-fontset-font t 'unicode (font-spec :family "FontAwesome") nil 'append)
;; (set-fontset-font t 'unicode (font-spec :family "Weather Icons") nil 'append)
#+end_src
** Unicode-Fonts
#+begin_src emacs-lisp
  (use-package unicode-fonts
    :ensure t
    :config
    (unicode-fonts-setup))
#+end_src
** Pretty symbols
#+BEGIN_SRC emacs-lisp
(require 'use-package)
  (when window-system
        (use-package pretty-mode
        :ensure t
        :config
        (global-pretty-mode t)))
#+END_SRC
** Show inline-images in org-mode
#+begin_src emacs-lisp
  (setq org-startup-with-inline-images t)
  ;; Refer to news about Emacs 27
  (setq imagemagick-types-inhibit t)
#+end_src
* Functionality
** Windows-Keys
#+begin_src emacs-lisp
  ;; (setq w32-pass-lwindow-to-system nil)
  ;; (setq w32-lwindow-modifier 'super) ; Left Windows key
  ;; (w32-register-hot-key [s-])
  ;; (w32-register-hot-key [M-tab])
#+end_src
** Discover.el for context-menues
#+begin_src emacs-lisp
  ;; (require 'discover)
  ;; (global-discover-mode 1)
#+end_src
** So Long prevents performacs issues if lines of text are very long
#+begin_src emacs-lisp
(if (version<= "27.1" emacs-version)
    (global-so-long-mode 1))
#+end_src
** Kill other buffers
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src
** Do not create backup files
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src
** Make deleted files goto trash
#+begin_src emacs-lisp
  ;; Won't work on windows - but will one day see into it - again
  (setq delete-by-moving-to-trash nil)
#+end_src
* Dired (Subtree & Sidebar)
#+begin_src emacs-lisp
  (use-package dired-sidebar
    :ensure t
    :after dired
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<C-tab>" . dired-subtree-cycle)
                ("<backtab>" . dired-subtree-remove))
    :commands (dired-sidebar-toggle-sidebar))
#+end_src
** Auto revert files on change
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src
** Changes yes-or-no to y-or-n questions
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Async (asynchronous processes, pretty useful)
#+begin_src emacs-lisp
(use-package async
  :ensure t
  :init (dired-async-mode 1))
#+end_src
** Winner-mode (store window configuration)
#+begin_src emacs-lisp
;; restore split pane config, winner-undo, winner-redo
(winner-mode 1)
#+end_src
** Support for external links 
#+begin_src emacs-lisp
(setq org-link-search-must-match-exact-headline nil)
#+end_src
* Launchers
** dmenu for emacs
#+BEGIN_SRC emacs-lisp
(use-package dmenu
  :ensure t
  :bind
    ("C-M-SPC" . 'dmenu))
#+END_SRC
** Global keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-xp" 'list-packages)
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-switchb)
#+END_SRC
* Elfeed
#+begin_src emacs-lisp
;; (global-set-key (kbd "C-x n f") 'elfeed)
;; (setq-default elfeed-search-filter "@1-week-ago +unread ")
;; (setq elfeed-feeds
;;         '(("https://aeon.co/feed.rss" aeon.co)
;;           ("https://psyche.co/feed.rss" psyche.co)
;;           ("https://planet.emacslife.com/atom.xml" emacslife)
;;           ("https://www.ecb.europa.eu/rss/press.html" ECB-Europa)
;;           ("https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" YoutUbe)
;;           ("https://protesilaos.com/politics.xml" Prot)))
;; (require 'elfeed-goodies)
;;
;; (elfeed-goodies/setup)
#+end_src
* EWW browser
** Open Links in eww (use F to toggle fonts)
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
;; When entering eww, use cursors to scroll without changing point.
(add-hook 'eww-mode-hook 'scroll-lock-mode)
#+end_src
* Projectile (awesome project-manager)
** Enable
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
    (projectile-mode 1))
#+end_src

** Enable globally (=<f5>=)
#+begin_src emacs-lisp
(global-set-key (kbd "<f5>") 'projectile-compile-project)
#+end_src
* Dashboard (Ref: github emacs-dashboard)
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
      (setq dashboard-startup-banner "~/.config/emacs/img/dashLogo.png")
      (setq dashboard-items '((recents  . 5)
                              (projects . 5)))
      (setq dashboard-banner-logo-title "")
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (dashboard-modify-heading-icons '((recents . "file-text")
                                (bookmarks . "book"))))
#+end_src
** Spaceline
#+begin_src emacs-lisp
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
** No seperator!
#+begin_src emacs-lisp
(setq powerline-default-seperator nil)
#+end_src
** Cursor position
#+begin_src emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
#+end_src
* Spacemacs-Theme
** Since I cant find an easy =use-package= for it, look at init.el
* DOOM Dracula theme
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
* Clock  
** Time format
#+begin_src emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
#+end_src
** Enabling the mode
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
* Battery indicator
#+begin_src emacs-lisp
(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))
#+end_src
* System monitor
#+begin_src emacs-lisp
(use-package symon
  :ensure t
  :bind
  ("s-h" . symon-mode))
#+end_src
* The terminal
** Default should be bash
#+begin_src emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+end_src
** Easy to remember keybinding (Super+Enter)
#+begin_src emacs-lisp
(global-set-key (kbd "<s-return>") 'ansi-term)
#+end_src
* Moving around emacs
** Set Ivy mode (github.com/nobiot)
#+begin_src emacs-lisp
  (use-package ivy
  :ensure t)
  ;; Ivy,Counsel, & Swiper
  ;; Enable Ivy mode in general
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)

  ;; Add Counsel functions
  (global-set-key (kbd "C-c f r") #'counsel-recentf)
  (global-set-key (kbd "C-c f a") #'counsel-org-goto-all)
  (global-set-key (kbd "C-c g") 'counsel-org-goto)

  ;; Optionally, you can replace these default functions with Counsel version, too
  (global-set-key (kbd "C-h f") 'counsel-describe-function)
  (global-set-key (kbd "C-h v") 'counsel-describe-variable)
#+end_src
** Scrollig and why does the screen move
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
    (global-set-key (kbd "C-M-p") 'scroll-up-line)
    (global-set-key (kbd "C-M-n") 'scroll-down-line)
#+end_src
** Insert newlines at end of buffer (masteringemacs.org)
#+begin_src emacs-lisp
(setq next-line-add-newlines t)
#+end_src
** Which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
    (which-key-mode))
#+end_src
* Windows, panes and why I hate other-window
** Window operations
#+begin_src emacs-lisp
(global-set-key (kbd "C-x w b") 'windmove-swap-states-left)
(global-set-key (kbd "C-x w f") 'windmove-swap-states-right)
(global-set-key (kbd "C-x w n") 'windmove-swap-states-down)
(global-set-key (kbd "C-x w p") 'windmove-swap-states-up)
#+end_src
** Switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-minibuffer-shortcut ?z)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
      ([remap other-window] . switch-window))
#+end_src
** Following window splits
#+begin_src emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
** Swiper and why is the default search so lame
#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :bind ("C-s" . 'swiper))
#+end_src
** Always murder current buffer
#+begin_src emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src

** Turn switch-to-buffer into ibuffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

** Close all buffers (C-M-s-k)
#+begin_src emacs-lisp
(defun close-all-buffers ()
  "Kill all buffers without regard for their origin."
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
(global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+end_src

** Line numbers in programming
#+begin_src emacs-lisp
(use-package linum-relative
  :ensure t
  :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+end_src

** Helm
#+begin_src emacs-lisp
(use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :config
    (defun daedreth/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 40
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p nil
          helm-move-to-line-cycle-in-source nil
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8 
          helm-echo-input-in-header-line t)
    :init
    (helm-mode 1))

  (require 'helm-config)    
  (helm-autoresize-mode 1)
  (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
  (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
#+end_src

** Avy: jumping to characters (M-s) - Now being in init.el because of discover.el binding
#+begin_src emacs-lisp
  (global-set-key (kbd "s-s") 'avy-goto-char)
#+end_src
* Text manipulation
** Hunspell
#+begin_src emacs-lisp
;; Set up spell checker using Hunspell
(with-eval-after-load "ispell"
(setenv "LANG" "en_US")
(setq ispell-program-name
      "~/hunspell-1.3.2-3-w32-bin/bin/hunspell.exe")
(setq ispell-directory "deutsch,en_US")
(ispell-set-spellchecker-params)
(ispell-hunspell-add-multi-dic "de_CH,en_US")
;; For saving words to the personal dictionary, don't infer it from
;; the locale, otherwise it would save to ~/.hunspell_de_DE.
(setq ispell-personal-dictionary "~/.hunspell_personal"))

;; The personal dictionary file has to exist, otherwise hunspell will
;; silently not use it.
;;(unless (file-exists-p ispell-personal-dictionary)
;;        (write-region "" nil ispell-personal-dictionary nil 0))

;; Set global keys
(global-set-key (kbd "C-x t s") 'flyspell-buffer)
(global-set-key (kbd "C-x t c") 'ispell-change-dictionary)
(global-set-key (kbd "C-x t m") 'flyspell-mode)
#+end_src
** Olivetti
#+begin_src emacs-lisp
  ;; Olivetti
  ;; Look & Feel for long-form writing

  ;; Set the body text width
  (setq olivetti-body-width 120)

  ;; Enable Olivetti for text-related mode such as Org Mode
  (use-package olivetti
    :ensure
    :diminish
    :config
    (setq olivetti-body-width 0.65)
    (setq olivetti-minimum-body-width 72)
    (setq olivetti-recall-visual-line-mode-entry-state t)
    (add-hook 'text-mode-hook 'turn-on-olivetti-mode)
    :bind ("C-c o" . olivetti-mode))
#+end_src
** Mark multiple and edit them all at once (C-c q)
#+begin_src emacs-lisp
(use-package mark-multiple
  :ensure t
  :bind ("C-c q" . 'mark-next-like-this))
#+end_src

** Improved kill-word (kill word with point in it)
#+begin_src emacs-lisp
(defun daedreth/kill-inner-word ()
  "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1))
(global-set-key (kbd "C-c w k") 'daedreth/kill-inner-word)
#+end_src

** Improved copy-word (like kill-word)
#+begin_src emacs-lisp
(defun daedreth/copy-whole-word ()
  (interactive)
  (save-excursion
    (forward-char 1)
    (backward-word)
    (kill-word 1)
    (yank)))
(global-set-key (kbd "C-c w c") 'daedreth/copy-whole-word)
#+end_src

** Visiting the config.org with C-c e
#+begin_src emacs-lisp
(defun config-visit ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-visit)
#+end_src

** Reloading the config with C-c r
#+begin_src emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/config.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+end_src

** Electric closes opened brackets
#+begin_src emacs-lisp
(setq electric-pair-pairs '(
                           (?\{ . ?\})
                           (?\( . ?\))
                           (?\[ . ?\])
                           (?\" . ?\")
                           ))
(electric-pair-mode t)
#+end_src

** Beacon cursor block
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
    (beacon-mode 1))
#+end_src

** Rainbow (colors for hex-code)
#+begin_src emacs-lisp
;; (use-package rainbow-mode
;;   :ensure t
;;   :init
;;     (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

** Show parent (brackets highlights)
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

** Rainbow-delimiters (Colors parentheses and other delimiters depending on their depth)
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Expand region (C-q - a pretty simple package, takes your cursor and semantically expands the region.
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-q" . er/expand-region))
#+end_src

** Hungry deletion (Deleting big whitespaces)
#+begin_src emacs-lisp
(use-package hungry-delete
  :ensure t
  :config
    (global-hungry-delete-mode))
#+end_src

** Zapping to char (kills all text between point and provided character)
#+begin_src emacs-lisp
(use-package zzz-to-char
  :ensure t
  :bind ("M-z" . zzz-up-to-char))
#+end_src

** Wnole Line or Region
#+begin_src emacs-lisp
;; (require 'whole-line-or-region)
#+end_src
** Annotation.el
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x a m") 'annotate-mode)
  (global-set-key (kbd "C-x M-a") 'annotate-annotate)
  (global-set-key (kbd "C-x a [") 'annotate-goto-next-annotation)
  (global-set-key (kbd "C-x a ]") 'annotate-goto-previous-annotation)
#+end_src
* Kill ring
** Browse kill-ring with M-y
#+begin_src emacs-lisp
(use-package popup-kill-ring
  :ensure t
  :bind ("M-y" . popup-kill-ring))
#+end_src
* Programming
** Yasnippet (Like TextMate for emacs)
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+end_src

** Company mode with C-n C-p instead of +M-n M-p+ after 2 seconds and 2 character provided
 #+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-idle-delay 1)
  (setq company-minimum-prefix-length 3))

(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (define-key company-active-map (kbd "SPC") #'company-abort))
#+end_src
* Git integration
** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)
  :bind
  ("M-g" . magit-status))
#+end_src
* Org
** Common settings
#+begin_src emacs-lisp
  (setq-default org-download-image-dir "~/org/files/")
    (setq org-ellipsis " ⤵")
  (setq org-src-fontify-natively t)
  (setq org-startup-folded t)
    (setq org-src-tab-acts-natively t)
    (setq org-confirm-babel-evaluate nil)
    (setq org-export-with-smart-quotes t)
    (setq org-src-window-setup 'current-window)
    (setq org-log-into-drawer t)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (setq org-hide-emphasis-markers t)
    (customize-set-variable 'org-blank-before-new-entry 
                          '((heading . nil)
                            (plain-list-item . nil)))
    (setq org-cycle-separator-lines 1)
#+end_src
** Org-Capture (Tasks)
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "TODO" entry (file+headline "~/org/tasks.org" "Tasks")
           "* TODO %?\n %i\n %a")))
  (define-key global-map (kbd "C-c t")
    (lambda () (interactive) (org-capture nil "t")))
#+end_src
** Org-Agenda
#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; org-mode agenda options                                                ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;warn me of any deadlines in next 7 days
  (setq org-deadline-warning-days 7)
  ;;show me tasks scheduled or due in next fortnight
  (setq org-agenda-span (quote fortnight))
  ;;don't show tasks as scheduled if they are already shown as a deadline
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  ;;don't give awarning colour to tasks with impending deadlines
  ;;if they are scheduled to be done
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
  ;;sort tasks in order of when they are due and then by priority
  (setq org-agenda-sorting-strategy
    (quote
     ((agenda deadline-up priority-down)
      (todo priority-down category-keep)
      (tags priority-down category-keep)
      (search category-keep))))
  (setq org-agenda-custom-commands
        '(("d" "Daily Review"
           ((agenda "" ((org-agenda-span 7)))
            (todo "ONIT")
            (todo "NEXT")
            (todo "MEETING")
            (todo "PROJECT")
            (todo "WAIT")
          ))
          ("D" "Deadlines" agenda ""
           ((org-agenda-entry-types '(:deadline))
            (org-agenda-span 1)
            (org-deadline-warning-days 60)
            (org-agenda-time-grid nil)
            ))
          ("f" "Did you forget me?" agenda ""
           ((org-agenda-entry-types '(:scheduled))
            (org-agenda-span 1)
            ))
           ))
#+end_src
** Org-Journal
#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :init
    ;; Change default prefix key before loading the org-journal
    (setq org-journal-prefix-key "C-c j")
    :config
    (setq org-journal-date-prefix "#+TITLE: "
          org-journal-file-format "%Y-%m-%d.org"
          org-journal-enable-agenda-integration t
          org-journal-dir "~/org/"
          org-journal-date-format "%A, %d %B %Y"))
#+end_src
** Org-download
#+begin_src emacs-lisp
    (use-package org-download
      :after org
      :bind
      (:map org-mode-map
            (("s-Y" . org-download-screenshot)
             ("s-y" . org-download-yank)
             ("s-c" . org-download-clipboard))))
  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
** Syntax higlightning for HTML export
#+begin_src emacs-lisp
(use-package htmlize
  :ensure t)
#+end_src
** Org-superstar
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
(with-eval-after-load 'org-superstar
  (set-face-attribute 'org-superstar-item nil :height 1.2)
  (set-face-attribute 'org-superstar-header-bullet nil :height 1.2)
  (set-face-attribute 'org-superstar-leading nil :height 1.3))
;; Set different bullets, with one getting a terminal fallback.
(setq org-superstar-headline-bullets-list
      '("◉" ("✪" ?◈) "○" "▷"))
;; Stop cycling bullets to emphasize hierarchy of headlines.
(setq org-superstar-cycle-headline-bullets nil)
;; Hide away leading stars on terminal.
(setq org-superstar-leading-fallback ?\s)
;; This is usually the default, but keep in mind it must be nil
(setq org-hide-leading-stars nil)
;; This line is necessary.
(setq org-superstar-leading-bullet ?\s)

(use-package emacs
  :config
  (setq window-divider-default-right-width 1)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-places t)
  (window-divider-mode -1))
#+end_src
** Selective Display
#+begin_src emacs-lisp
(setq selective-display-ellipses t)
(setq selective-display 1)
#+end_src
** Line-wrapping
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
	    '(lambda ()
	       (visual-line-mode 1)))
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c s") 'org-edit-src-code)
  (global-set-key (kbd "C-c C-h") 'org-schedule)
#+end_src

#+RESULTS:
: counsel-org-goto
* Bootstrap
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
* Org-Roam
** Installation
#+begin_src emacs-lisp
  (use-package org-roam
        :ensure t
        :init
        (add-hook 'after-init-hook 'org-roam-mode)
        :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n l" . org-roam)
                 ("C-c n j" . org-roam-jump-to-index)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n i" . org-roam-insert)
                 ("C-c n r" . org-roam-find-ref)
                 ("C-c n t" . org-roam-dailies-find-today)
                 ("C-c n y" . org-roam-dailies-find-yesterday)
                 ("C-c n w" . org-roam-dailies-find-tomorrow)
                 ("C-c n d" . org-roam-dailies-find-date)
                 ("C-c n u" . org-roam-unlinked-references)
                 ("C-c n c" . org-roam-capture))))
#+end_src
** Configuration
#+begin_src emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO(t)" "NEXT(n)" "PROJECT(p)" "ONIT(o)" "WAIT(w@/!)" "MEETING(m@)" "|" "DONE(d!)" "CANCELLED(c@)")))
      (setq org-roam-list-files-commands '(elisp))
      (setq org-roam-directory (expand-file-name "~/org/"))
      (setq org-roam-completion-everywhere t) 
      (setq org-roam-buffer-position 'right)
      (setq org-roam-buffer-width 0.15)
      (setq org-roam-link-title-format "R:%s")
      (setq org-roam-index-file "~/org/index.org")
      (setq org-roam-completion-system 'default)
      (setq org-roam-capture-templates
       '(("d" "default" plain (function org-roam-capture--get-point)
       "%?"
       :file-name "${slug}"
       :head "#+TITLE: ${title}\n#+CREATED: %<%Y-%m-%d>\n#+ROAM_ALIAS:\n#+ROAM_TAGS:\n\n* What's on?"
       :unnarrowed t)
         ))
  (setq org-roam-dailies-capture-templates
       '(("a" "daily" plain #'org-roam--capture-get-point ""
          :immediate-finish t
       :file-name "%<%Y-%m-%d>"
       :head "#+TITLE: %<%A, %e %B %Y>\n#+CREATED: %<%Y-%m-%d>\n#+ROAM_ALIAS:\n#+ROAM_TAGS:\n\n* What's on?"
       :unnarrowed t)
        ))
#+end_src
** DELVE into your org-roam Zettelkasten
# #+begin_src emacs-lisp
# (use-package lister
#   :quelpa (lister :fetcher git
#   		  :url "https://github.com/publicimageltd/lister"))

# (use-package delve
#   :quelpa (delve :fetcher git 
# 		 :url "https://github.com/publicimageltd/delve")
#   :config
#   (use-package delve-minor-mode
#     :config
#     (add-hook 'org-mode-hook #'delve-minor-mode-maybe-activate))
#   :bind
#   (("<f12>" . delve-open-or-select)))
# #+end_src
** Ecosystem DEFT
#+begin_src emacs-lisp
(use-package deft
  :after org
  :bind
  ("C-c n e" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/org/"))
#+end_src
** Org-roam-server
#+begin_src emacs-lisp
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-label-truncate t
        org-roam-server-label-truncate-length 60
        org-roam-server-label-wrap-length 20))
#+end_src
* Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

